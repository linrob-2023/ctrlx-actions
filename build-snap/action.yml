# MIT License

# Copyright (c) 2022 Bosch Rexroth AG

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: 'ctrlX Build Snap'
description: 'Building ctrlX snap'
author: 'Bosch Rexroth AG'

inputs:
  architecture:
    description: 'Architecture to build'
    required: true
  path-app-files:
    description: 'Path to the app files & snap/snapcraft.yaml'
    required: false
    default: $GITHUB_WORKSPACE

outputs:
  path-snap:
    description: 'Absolute path to the built snap'
    value: ${{ steps.build-snap.outputs.path-snap }}

runs:
  using: "composite"
  steps:

    - run: "echo ::error::wrong OS, please select runs-on: ubuntu-latest && exit 1"
      if: runner.os != 'linux'
      shell: bash

    - run: |
        echo "Updating package list..."
        sudo apt-get update
         echo "Installing dependencies and setting up multiarch..."
        sudo apt-get install -y python3-pip  # Ensure pip is available
        sudo pip install ctrlx-datalayer  # Install ctrlx-datalayer using pip
        sudo snap install snapcraft --classic  # Install Snapcraft
        sudo dpkg --add-architecture arm64  # Enable arm64 architecture
        # Add necessary APT repositories for arm64
        echo "deb [arch=arm64] http://ports.ubuntu.com/ focal main restricted universe" | sudo tee -a /etc/apt/sources.list.d/multiarch-libs.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ focal-updates main restricted universe" | sudo tee -a /etc/apt/sources.list.d/multiarch-libs.list
        # Adjust the existing sources list for amd64 to be explicit
        sudo sed -i 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
        echo "Running apt-get update after adding architecture..."
        echo "sudo apt-get update"  # Ensure that apt update succeeds after adding new architecture
      shell: bash

    - id: build-snap
      run: |
        cd ${{ inputs.path-app-files }}
        echo "Building snap in path: ${{ inputs.path-app-files }}"

        # Clean previous builds
        sudo snapcraft clean # --destructive-mode

        sudo lxd init --auto
        # Build the snap for the specified architecture
        sudo snapcraft --build-for=${{ inputs.architecture }} --verbosity=verbose --destructive-mode --enable-experimental-extensions
        # snapcraft --destructive-mode --target-arch=${{ inputs.architecture }} --enable-experimental-target-arch
        # Find and output the built snap's path
        SNAP_PATH=$(find . -name "*${{ inputs.architecture }}.snap")
        echo "path-snap=$(realpath $SNAP_PATH)" >> $GITHUB_OUTPUT
      shell: bash
        # cd ${{ inputs.path-app-files }}
        # echo ${{ inputs.path-app-files }}
        # sudo snapcraft clean --destructive-mode
      # sudo snapcraft --destructive-mode --target-arch=${{ inputs.architecture }} --enable-experimental-target-arch
      # echo "path-snap=$(realpath $(find -name '*${{ inputs.architecture }}.snap'))" >> $GITHUB_OUTPUT
        # Print Snapcraft logs if the build fails
    - name: Print Snapcraft Logs on Failure
      if: failure()  # This ensures it runs only if the previous step fails
      run: |
        echo "Printing Snapcraft logs..."
        sudo cat /root/.local/state/snapcraft/log/snapcraft-*.log || echo "No log file found"
      shell: bash
